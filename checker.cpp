#include <bits/stdc++.h>
using namespace std;
using ll = long long;

template <class F>
struct Point {
    F x, y;
    Point(F x = 0, F y = 0) : x(x), y(y) {}
    
    bool operator<(const Point& other) const { 
        return tie(x, y) < tie(other.x, other.y); 
    }

    bool operator==(const Point& other) const { 
        return x == other.x && y == other.y; 
    }
};

template <class F> using Polygon = vector<Point<F>>;

inline int prev(int i, int n) { return i == 0 ? n-1 : i-1; }
inline int next(int i, int n) { return i == n-1 ? 0 : i+1; }

template <class F>
F area(const Polygon<F>& poly) {
    int n = static_cast<int>(poly.size());
    F area = F(0);
    for (int i = 0; i < n; ++i)
        area += poly[i].x * (poly[next(i, n)].y - poly[prev(i, n)].y);
    return area;
}

template <class F>
bool edge_inter(pair<Point<F>, Point<F>> e1, pair<Point<F>, Point<F>> e2) {
    auto [p1, p2] = e1; auto [p3, p4] = e2;
    F x = p1.x, y = p3.y;
    return (min(p1.y, p2.y) < y && y < max(p1.y, p2.y) &&
            min(p3.x, p4.x) < x && x < max(p3.x, p4.x));
}

template <class F>
void dfs_for_check(Point<F> p, map<Point<F>, Point<F>>& hori, map<Point<F>, Point<F>>& veri, 
                   map<Point<F>, bool>& vis, vector<Point<F>>& vertices) {
    vis[p] = true;
    vertices.push_back(p);
    if (!vis[hori[p]]) dfs_for_check(hori[p], hori, veri, vis, vertices);
    if (!vis[veri[p]]) dfs_for_check(veri[p], hori, veri, vis, vertices);
}

template <class F>
bool checker(vector<pair<Point<F>, Point<F>>>& edges, vector<Point<F>>& vertices) {
    map<Point<F>, Point<F>> hori, veri;
    map<Point<F>, int> deg;
    
    for (auto& [p1, p2] : edges) {
        if (p1 == p2) {
            //cout << p1.x << " " << p1.y << " "<<p2.x << " "<<p2.y << endl;
            cerr << "INVALID! Edge of 0 length\n";
            return false;
        }
        if (p1.x != p2.x && p1.y != p2.y) {
            cerr << "INVALID! Edge not parallel to axes\n";
            return false;
        }
        if (p1.x == p2.x) { hori[p1] = p2; hori[p2] = p1; }
        else { veri[p1] = p2; veri[p2] = p1; }
        deg[p1]++; deg[p2]++;
    }

    for (auto& [p1, p2] : edges) {
        for (auto& [p3, p4] : edges) {
            if (p1 == p3 && p2 == p4) continue;
            bool hori1 = (p1.y == p2.y), hori2 = (p3.y == p4.y);
            if (hori1 && hori2) {
                if (p1.y != p3.y || (max(p1.x, p2.x) < min(p3.x, p4.x)) ||
                    (max(p3.x, p4.x) < min(p1.x, p2.x))) {}
                else {
                    cerr << "INVALID! Edge intersect or is making 180 degrees at a vertex\n";
                    return false;
                }
            } 
            else if(!hori1&&hori2) {
                if(edge_inter(pair<Point<double>, Point<double>>{p1, p2}, pair<Point<double>, Point<double>>{p3, p4})) {cerr << "INVALID! Edge intersect\n";
                return false;}
            }
            else if(hori1&&!hori2) {
                if(edge_inter(pair<Point<double>, Point<double>>{p3, p4}, pair<Point<double>, Point<double>>{p1, p2})) {cerr << "INVALID! Edge intersect\n";
                return false;}
            }
            else {
                if(((p1.x != p3.x) || (max(p1.y, p2.y) < min(p3.y, p4.y)) ||
                       (max(p3.y, p4.y) < min(p1.y, p2.y)))) {}
                else {
                    cerr << "INVALID! Edge intersect or is making 180 degrees at a vertex\n";
                    return false;
                }
            }
        }
    }

    for (auto& [p, x] : deg) {
        if (x != 2) {
            cerr << "INVALID! Some vertex doesn't have a degree of 2\n";
            return false;
        }
    }

    map<Point<F>, bool> vis;
    dfs_for_check(edges[0].first, hori, veri, vis, vertices);
    
    for (auto& [p, x] : deg) {
        if (!vis[p]) {
            cerr << "INVALID! There are holes!\n";
            return false;
        }
    }
    
    return true;
}

template <class F>
F ccw(const Point<F>& A, const Point<F>& B, const Point<F>& C) {
    return ((B.x-A.x)*(C.y-A.y)-(B.y-A.y)*(C.x-A.x)) ;
}

template <class F1, class F2>
int pointVsPolygon(const Point<F1>& point, const Polygon<F2>& poly) {
  int n = static_cast<int>(poly.size()), windingNumber = 0;
  for (int i = 0; i < n; ++i) {
    if (point == poly[i]) return 0;
    int j = next(i, n);
    if (poly[i].y == point.y && poly[j].y == point.y) {
      if (min(poly[i].x, poly[j].x) <= point.x &&
          point.x <= max(poly[i].x, poly[j].x)) return 0;
    } else {
      bool below = poly[i].y < point.y;
      if (below != (poly[j].y < point.y)) {
        auto orientation = ccw(point, poly[j], poly[i]);
        if (orientation == 0) return 0;
        if (below == (orientation > 0)) windingNumber += below ? 1 : -1;
      }
    }
  }
  return windingNumber == 0 ? 1 : -1;
}

template <class F>
ll score_calc(vector<pair<Point<F>, Point<F>>>& edges, vector<pair<Point<F>,int>>& given_shells_mines) {
    vector<Point<F>> vertices;
    if(checker(edges,vertices)) {
        if(area(vertices)<0) {reverse(vertices.begin(),vertices.end());}
        ll res = 0;
        for(auto& [point,val]:given_shells_mines) {
            if(pointVsPolygon(point,vertices)!=1) res+=val;
        }
        return res;
    }
    else return -1;
}

// Function to generate a random double in the given range
double randDouble(double low, double high) {
    return low + (high - low) * (rand() / (double)RAND_MAX);
}

// Function to generate a random set of edges
vector<pair<Point<double>, Point<double>>> generateRandomEdges(int numEdges, double rangeX, double rangeY) {
    vector<pair<Point<double>, Point<double>>> edges;
    set<pair<Point<double>, Point<double>>> edgeSet; // Ensure uniqueness

    while ((int)edges.size() < numEdges) {
        double x1 = randDouble(0, rangeX);
        double y1 = randDouble(0, rangeY);
        bool horizontal = rand() % 2;
        
        double x2 = horizontal ? randDouble(x1, rangeX) : x1;
        double y2 = horizontal ? y1 : randDouble(y1, rangeY);

        if (x1 == x2 && y1 == y2) continue; // Skip zero-length edges

        pair<Point<double>, Point<double>> edge = {{x1, y1}, {x2, y2}};
        if (edgeSet.count(edge) == 0) {
            edges.push_back(edge);
            edgeSet.insert(edge);
        }
    }

    return edges;
}

// Function to generate random shells and mines
vector<pair<Point<double>, int>> generateRandomShellsMines(int numItems, double rangeX, double rangeY, int minVal, int maxVal) {
    vector<pair<Point<double>, int>> items;

    for (int i = 0; i < numItems; ++i) {
        double x = randDouble(0, rangeX);
        double y = randDouble(0, rangeY);
        int value = rand() % (maxVal - minVal + 1) + minVal;
        items.push_back({{x, y}, value});
    }

    return items;
}

int main() {
    srand(time(0)); // Seed for randomness
    //put edges in this file
    // freopen("edg.txt","r",stdin);
    vector<pair<Point<double>, Point<double>>> edges={
        {{0, 0},{0,10000}},
{{0.2, 9899.8},{0.2,9999.8}},
{{99.8, 4299.8},{99.8,9899.8}},
{{100, 4400},{100,9899.8}},
{{200, 4299.8},{200,4400}},
{{499.8, 6999.8},{499.8,9899.8}},
{{500, 7100},{500,8299.8}},
{{500, 8400},{500,9899.8}},
{{600, 6999.8},{600,7100}},
{{600, 8299.8},{600,8400}},
{{699.8, 1099.8},{699.8,9899.8}},
{{700, 1200},{700,1999.8}},
{{700, 2100},{700,9299.8}},
{{700, 9400},{700,9899.8}},
{{799.8, 1899.8},{799.8,1999.8}},
{{799.8, 2100},{799.8,2200}},
{{800, 1099.8},{800,1200}},
{{800, 2000},{800,2099.8}},
{{800, 9299.8},{800,9400}},
{{899.8, 8599.8},{899.8,9899.8}},
{{900, 1899.8},{900,2000}},
{{900, 2099.8},{900,2200}},
{{900, 8700},{900,9899.8}},
{{999.8, 4499.8},{999.8,8599.8}},
{{1000, 4600},{1000,8700}},
{{1100, 4499.8},{1100,4600}},
{{1199.8, 4199.8},{1199.8,9899.8}},
{{1200, 4300},{1200,9899.8}},
{{1300, 4199.8},{1300,4300}},
{{1499.8, 5299.8},{1499.8,9899.8}},
{{1500, 5400},{1500,9799.8}},
{{1600, 5299.8},{1600,5400}},
{{1600, 9799.8},{1600,9899.8}},
{{1799.8, 2899.8},{1799.8,9899.8}},
{{1800, 3000},{1800,9899.8}},
{{1899.8, 8599.8},{1899.8,9899.8}},
{{1900, 2899.8},{1900,3000}},
{{1900, 8700},{1900,9899.8}},
{{1999.8, 2199.8},{1999.8,8599.8}},
{{2000, 2300},{2000,6399.8}},
{{2000, 6500},{2000,7799.8}},
{{2000, 7900},{2000,8700}},
{{2100, 2199.8},{2100,2300}},
{{2100, 6399.8},{2100,6500}},
{{2100, 7799.8},{2100,7900}},
{{2199.8, 5799.8},{2199.8,9899.8}},
{{2200, 5900},{2200,9199.8}},
{{2200, 9300},{2200,9899.8}},
{{2299.8, 8099.8},{2299.8,9199.8}},
{{2300, 5799.8},{2300,5900}},
{{2300, 8200},{2300,9300}},
{{2400, 8099.8},{2400,8200}},
{{2499.8, 8799.8},{2499.8,9899.8}},
{{2500, 8900},{2500,9899.8}},
{{2600, 8799.8},{2600,8900}},
{{2699.8, 3699.8},{2699.8,9899.8}},
{{2700, 3800},{2700,9899.8}},
{{2799.8, 3199.8},{2799.8,3699.8}},
{{2799.8, 9099.8},{2799.8,9899.8}},
{{2800, 3300},{2800,3800}},
{{2800, 9200},{2800,9399.8}},
{{2800, 9500},{2800,9899.8}},
{{2899.8, 7299.8},{2899.8,9099.8}},
{{2899.8, 9500},{2899.8,9600}},
{{2900, 3199.8},{2900,3300}},
{{2900, 7400},{2900,7599.8}},
{{2900, 7700},{2900,9200}},
{{2900, 9399.8},{2900,9499.8}},
{{3000, 7299.8},{3000,7400}},
{{3000, 7599.8},{3000,7700}},
{{3000, 9499.8},{3000,9600}},
{{3299.8, 4199.8},{3299.8,9899.8}},
{{3300, 4300},{3300,9899.8}},
{{3400, 4199.8},{3400,4300}},
{{3699.8, 299.8},{3699.8,9899.8}},
{{3700, 400},{3700,9899.8}},
{{3799.8, 6399.8},{3799.8,9899.8}},
{{3800, 299.8},{3800,400}},
{{3800, 6500},{3800,8999.8}},
{{3800, 9100},{3800,9899.8}},
{{3899.8, 4299.8},{3899.8,6399.8}},
{{3899.8, 8799.8},{3899.8,8999.8}},
{{3900, 4400},{3900,6500}},
{{3900, 8900},{3900,9100}},
{{3999.8, 5099.8},{3999.8,8799.8}},
{{4000, 4299.8},{4000,4400}},
{{4000, 5200},{4000,8900}},
{{4099.8, 2499.8},{4099.8,5099.8}},
{{4099.8, 9599.8},{4099.8,9899.8}},
{{4100, 2600},{4100,5200}},
{{4100, 9700},{4100,9899.8}},
{{4199.8, 99.8},{4199.8,2499.8}},
{{4199.8, 8599.8},{4199.8,9599.8}},
{{4200, 200},{4200,2600}},
{{4200, 8700},{4200,9700}},
{{4300, 99.8},{4300,200}},
{{4300, 8599.8},{4300,8700}},
{{4399.8, 1499.8},{4399.8,9899.8}},
{{4400, 1600},{4400,5699.8}},
{{4400, 5800},{4400,9899.8}},
{{4499.8, 7599.8},{4499.8,9899.8}},
{{4500, 1499.8},{4500,1600}},
{{4500, 5699.8},{4500,5800}},
{{4500, 7700},{4500,9899.8}},
{{4600, 7599.8},{4600,7700}},
{{4699.8, 5099.8},{4699.8,9899.8}},
{{4700, 5200},{4700,9899.8}},
{{4799.8, 3499.8},{4799.8,5099.8}},
{{4799.8, 6999.8},{4799.8,9899.8}},
{{4800, 3600},{4800,5200}},
{{4800, 7100},{4800,9899.8}},
{{4899.8, 7799.8},{4899.8,9899.8}},
{{4900, 3499.8},{4900,3600}},
{{4900, 6999.8},{4900,7100}},
{{4900, 7900},{4900,9899.8}},
{{5000, 7799.8},{5000,7900}},
{{5399.8, 3799.8},{5399.8,9899.8}},
{{5400, 3900},{5400,9899.8}},
{{5500, 3799.8},{5500,3900}},
{{5599.8, 5099.8},{5599.8,9899.8}},
{{5600, 5200},{5600,9899.8}},
{{5699.8, 5200},{5699.8,5300}},
{{5700, 5099.8},{5700,5199.8}},
{{5800, 5199.8},{5800,5300}},
{{5999.8, 1299.8},{5999.8,9899.8}},
{{6000, 1400},{6000,9899.8}},
{{6099.8, 1999.8},{6099.8,9899.8}},
{{6100, 1299.8},{6100,1400}},
{{6100, 2100},{6100,9899.8}},
{{6199.8, 1599.8},{6199.8,1999.8}},
{{6200, 1700},{6200,2100}},
{{6300, 1599.8},{6300,1700}},
{{6599.8, 5299.8},{6599.8,9899.8}},
{{6600, 5400},{6600,9899.8}},
{{6699.8, 8799.8},{6699.8,9899.8}},
{{6700, 5299.8},{6700,5400}},
{{6700, 8900},{6700,9199.8}},
{{6700, 9300},{6700,9899.8}},
{{6800, 8799.8},{6800,8900}},
{{6800, 9199.8},{6800,9300}},
{{6899.8, 599.8},{6899.8,9899.8}},
{{6900, 700},{6900,5299.8}},
{{6900, 5400},{6900,9899.8}},
{{6999.8, 5599.8},{6999.8,9899.8}},
{{7000, 599.8},{7000,700}},
{{7000, 5299.8},{7000,5400}},
{{7000, 5700},{7000,9899.8}},
{{7100, 5599.8},{7100,5700}},
{{7199.8, 299.8},{7199.8,9899.8}},
{{7200, 400},{7200,699.8}},
{{7200, 800},{7200,9899.8}},
{{7299.8, 5799.8},{7299.8,9899.8}},
{{7300, 299.8},{7300,400}},
{{7300, 699.8},{7300,800}},
{{7300, 5900},{7300,9499.8}},
{{7300, 9600},{7300,9899.8}},
{{7400, 5799.8},{7400,5900}},
{{7400, 9499.8},{7400,9600}},
{{7499.8, 2899.8},{7499.8,9899.8}},
{{7500, 3000},{7500,3399.8}},
{{7500, 3500},{7500,9899.8}},
{{7600, 2899.8},{7600,3000}},
{{7600, 3399.8},{7600,3500}},
{{7799.8, 1299.8},{7799.8,9899.8}},
{{7800, 1400},{7800,6999.8}},
{{7800, 7100},{7800,9899.8}},
{{7899.8, 1400},{7899.8,1500}},
{{7899.8, 4599.8},{7899.8,6999.8}},
{{7900, 1299.8},{7900,1399.8}},
{{7900, 4700},{7900,7100}},
{{7999.8, 4199.8},{7999.8,4599.8}},
{{8000, 1399.8},{8000,1500}},
{{8000, 4300},{8000,4700}},
{{8100, 4199.8},{8100,4300}},
{{8799.8, 599.8},{8799.8,9899.8}},
{{8800, 700},{8800,9799.8}},
{{8899.8, 6499.8},{8899.8,9799.8}},
{{8900, 599.8},{8900,700}},
{{8900, 6600},{8900,9899.8}},
{{8999.8, 2699.8},{8999.8,6499.8}},
{{8999.8, 9099.8},{8999.8,9899.8}},
{{9000, 2800},{9000,6600}},
{{9000, 9200},{9000,9899.8}},
{{9100, 2699.8},{9100,2800}},
{{9100, 9099.8},{9100,9200}},
{{9199.8, 9099.8},{9199.8,9899.8}},
{{9200, 9200},{9200,9799.8}},
{{9299.8, 0},{9299.8,100}},
{{9299.8, 7299.8},{9299.8,9099.8}},
{{9300, 7400},{9300,7899.8}},
{{9300, 8000},{9300,8599.8}},
{{9300, 8700},{9300,9200}},
{{9399.8, 8000},{9399.8,8100}},
{{9400, 0},{9400,100}},
{{9400, 7299.8},{9400,7400}},
{{9400, 7899.8},{9400,7999.8}},
{{9400, 8599.8},{9400,8700}},
{{9400, 9799.8},{9400,9899.8}},
{{9500, 7999.8},{9500,8100}},
{{9799.8, 9199.8},{9799.8,9899.8}},
{{9800, 9300},{9800,9899.8}},
{{9900, 9199.8},{9900,9300}},
{{9999.8, 0},{9999.8,9899.8}},
{{10000, 9999.8},{10000,10000}},
{{0, 0},{9299.8,0}},
{{9400, 0},{9999.8,0}},
{{4199.8, 99.8},{4300,99.8}},
{{9299.8, 100},{9400,100}},
{{4200, 200},{4300,200}},
{{3699.8, 299.8},{3800,299.8}},
{{7199.8, 299.8},{7300,299.8}},
{{3700, 400},{3800,400}},
{{7200, 400},{7300,400}},
{{6899.8, 599.8},{7000,599.8}},
{{8799.8, 599.8},{8900,599.8}},
{{7200, 699.8},{7300,699.8}},
{{6900, 700},{7000,700}},
{{8800, 700},{8900,700}},
{{7200, 800},{7300,800}},
{{699.8, 1099.8},{800,1099.8}},
{{700, 1200},{800,1200}},
{{5999.8, 1299.8},{6100,1299.8}},
{{7799.8, 1299.8},{7900,1299.8}},
{{7900, 1399.8},{8000,1399.8}},
{{6000, 1400},{6100,1400}},
{{7800, 1400},{7899.8,1400}},
{{4399.8, 1499.8},{4500,1499.8}},
{{7899.8, 1500},{8000,1500}},
{{6199.8, 1599.8},{6300,1599.8}},
{{4400, 1600},{4500,1600}},
{{6200, 1700},{6300,1700}},
{{799.8, 1899.8},{900,1899.8}},
{{700, 1999.8},{799.8,1999.8}},
{{6099.8, 1999.8},{6199.8,1999.8}},
{{800, 2000},{900,2000}},
{{800, 2099.8},{900,2099.8}},
{{700, 2100},{799.8,2100}},
{{6100, 2100},{6200,2100}},
{{1999.8, 2199.8},{2100,2199.8}},
{{799.8, 2200},{900,2200}},
{{2000, 2300},{2100,2300}},
{{4099.8, 2499.8},{4199.8,2499.8}},
{{4100, 2600},{4200,2600}},
{{8999.8, 2699.8},{9100,2699.8}},
{{9000, 2800},{9100,2800}},
{{1799.8, 2899.8},{1900,2899.8}},
{{7499.8, 2899.8},{7600,2899.8}},
{{1800, 3000},{1900,3000}},
{{7500, 3000},{7600,3000}},
{{2799.8, 3199.8},{2900,3199.8}},
{{2800, 3300},{2900,3300}},
{{7500, 3399.8},{7600,3399.8}},
{{4799.8, 3499.8},{4900,3499.8}},
{{7500, 3500},{7600,3500}},
{{4800, 3600},{4900,3600}},
{{2699.8, 3699.8},{2799.8,3699.8}},
{{5399.8, 3799.8},{5500,3799.8}},
{{2700, 3800},{2800,3800}},
{{5400, 3900},{5500,3900}},
{{1199.8, 4199.8},{1300,4199.8}},
{{3299.8, 4199.8},{3400,4199.8}},
{{7999.8, 4199.8},{8100,4199.8}},
{{99.8, 4299.8},{200,4299.8}},
{{3899.8, 4299.8},{4000,4299.8}},
{{1200, 4300},{1300,4300}},
{{3300, 4300},{3400,4300}},
{{8000, 4300},{8100,4300}},
{{100, 4400},{200,4400}},
{{3900, 4400},{4000,4400}},
{{999.8, 4499.8},{1100,4499.8}},
{{7899.8, 4599.8},{7999.8,4599.8}},
{{1000, 4600},{1100,4600}},
{{7900, 4700},{8000,4700}},
{{3999.8, 5099.8},{4099.8,5099.8}},
{{4699.8, 5099.8},{4799.8,5099.8}},
{{5599.8, 5099.8},{5700,5099.8}},
{{5700, 5199.8},{5800,5199.8}},
{{4000, 5200},{4100,5200}},
{{4700, 5200},{4800,5200}},
{{5600, 5200},{5699.8,5200}},
{{1499.8, 5299.8},{1600,5299.8}},
{{6599.8, 5299.8},{6700,5299.8}},
{{6900, 5299.8},{7000,5299.8}},
{{5699.8, 5300},{5800,5300}},
{{1500, 5400},{1600,5400}},
{{6600, 5400},{6700,5400}},
{{6900, 5400},{7000,5400}},
{{6999.8, 5599.8},{7100,5599.8}},
{{4400, 5699.8},{4500,5699.8}},
{{7000, 5700},{7100,5700}},
{{2199.8, 5799.8},{2300,5799.8}},
{{7299.8, 5799.8},{7400,5799.8}},
{{4400, 5800},{4500,5800}},
{{2200, 5900},{2300,5900}},
{{7300, 5900},{7400,5900}},
{{2000, 6399.8},{2100,6399.8}},
{{3799.8, 6399.8},{3899.8,6399.8}},
{{8899.8, 6499.8},{8999.8,6499.8}},
{{2000, 6500},{2100,6500}},
{{3800, 6500},{3900,6500}},
{{8900, 6600},{9000,6600}},
{{499.8, 6999.8},{600,6999.8}},
{{4799.8, 6999.8},{4900,6999.8}},
{{7800, 6999.8},{7899.8,6999.8}},
{{500, 7100},{600,7100}},
{{4800, 7100},{4900,7100}},
{{7800, 7100},{7900,7100}},
{{2899.8, 7299.8},{3000,7299.8}},
{{9299.8, 7299.8},{9400,7299.8}},
{{2900, 7400},{3000,7400}},
{{9300, 7400},{9400,7400}},
{{2900, 7599.8},{3000,7599.8}},
{{4499.8, 7599.8},{4600,7599.8}},
{{2900, 7700},{3000,7700}},
{{4500, 7700},{4600,7700}},
{{2000, 7799.8},{2100,7799.8}},
{{4899.8, 7799.8},{5000,7799.8}},
{{9300, 7899.8},{9400,7899.8}},
{{2000, 7900},{2100,7900}},
{{4900, 7900},{5000,7900}},
{{9400, 7999.8},{9500,7999.8}},
{{9300, 8000},{9399.8,8000}},
{{2299.8, 8099.8},{2400,8099.8}},
{{9399.8, 8100},{9500,8100}},
{{2300, 8200},{2400,8200}},
{{500, 8299.8},{600,8299.8}},
{{500, 8400},{600,8400}},
{{899.8, 8599.8},{999.8,8599.8}},
{{1899.8, 8599.8},{1999.8,8599.8}},
{{4199.8, 8599.8},{4300,8599.8}},
{{9300, 8599.8},{9400,8599.8}},
{{900, 8700},{1000,8700}},
{{1900, 8700},{2000,8700}},
{{4200, 8700},{4300,8700}},
{{9300, 8700},{9400,8700}},
{{2499.8, 8799.8},{2600,8799.8}},
{{3899.8, 8799.8},{3999.8,8799.8}},
{{6699.8, 8799.8},{6800,8799.8}},
{{2500, 8900},{2600,8900}},
{{3900, 8900},{4000,8900}},
{{6700, 8900},{6800,8900}},
{{3800, 8999.8},{3899.8,8999.8}},
{{2799.8, 9099.8},{2899.8,9099.8}},
{{8999.8, 9099.8},{9100,9099.8}},
{{9199.8, 9099.8},{9299.8,9099.8}},
{{3800, 9100},{3900,9100}},
{{2200, 9199.8},{2299.8,9199.8}},
{{6700, 9199.8},{6800,9199.8}},
{{9799.8, 9199.8},{9900,9199.8}},
{{2800, 9200},{2900,9200}},
{{9000, 9200},{9100,9200}},
{{9200, 9200},{9300,9200}},
{{700, 9299.8},{800,9299.8}},
{{2200, 9300},{2300,9300}},
{{6700, 9300},{6800,9300}},
{{9800, 9300},{9900,9300}},
{{2800, 9399.8},{2900,9399.8}},
{{700, 9400},{800,9400}},
{{2900, 9499.8},{3000,9499.8}},
{{7300, 9499.8},{7400,9499.8}},
{{2800, 9500},{2899.8,9500}},
{{4099.8, 9599.8},{4199.8,9599.8}},
{{2899.8, 9600},{3000,9600}},
{{7300, 9600},{7400,9600}},
{{4100, 9700},{4200,9700}},
{{1500, 9799.8},{1600,9799.8}},
{{8800, 9799.8},{8899.8,9799.8}},
{{9200, 9799.8},{9400,9799.8}},
{{0.2, 9899.8},{99.8,9899.8}},
{{100, 9899.8},{499.8,9899.8}},
{{500, 9899.8},{699.8,9899.8}},
{{700, 9899.8},{899.8,9899.8}},
{{900, 9899.8},{1199.8,9899.8}},
{{1200, 9899.8},{1499.8,9899.8}},
{{1600, 9899.8},{1799.8,9899.8}},
{{1800, 9899.8},{1899.8,9899.8}},
{{1900, 9899.8},{2199.8,9899.8}},
{{2200, 9899.8},{2499.8,9899.8}},
{{2500, 9899.8},{2699.8,9899.8}},
{{2700, 9899.8},{2799.8,9899.8}},
{{2800, 9899.8},{3299.8,9899.8}},
{{3300, 9899.8},{3699.8,9899.8}},
{{3700, 9899.8},{3799.8,9899.8}},
{{3800, 9899.8},{4099.8,9899.8}},
{{4100, 9899.8},{4399.8,9899.8}},
{{4400, 9899.8},{4499.8,9899.8}},
{{4500, 9899.8},{4699.8,9899.8}},
{{4700, 9899.8},{4799.8,9899.8}},
{{4800, 9899.8},{4899.8,9899.8}},
{{4900, 9899.8},{5399.8,9899.8}},
{{5400, 9899.8},{5599.8,9899.8}},
{{5600, 9899.8},{5999.8,9899.8}},
{{6000, 9899.8},{6099.8,9899.8}},
{{6100, 9899.8},{6599.8,9899.8}},
{{6600, 9899.8},{6699.8,9899.8}},
{{6700, 9899.8},{6899.8,9899.8}},
{{6900, 9899.8},{6999.8,9899.8}},
{{7000, 9899.8},{7199.8,9899.8}},
{{7200, 9899.8},{7299.8,9899.8}},
{{7300, 9899.8},{7499.8,9899.8}},
{{7500, 9899.8},{7799.8,9899.8}},
{{7800, 9899.8},{8799.8,9899.8}},
{{8900, 9899.8},{8999.8,9899.8}},
{{9000, 9899.8},{9199.8,9899.8}},
{{9400, 9899.8},{9799.8,9899.8}},
{{9800, 9899.8},{9999.8,9899.8}},
{{0.2, 9999.8},{10000,9999.8}},
{{0, 10000},{10000,10000}},

    };    freopen("./final_input/input17.txt","r",stdin);
    
    vector<pair<Point<double>, int>> given_shells_mines;
    int n; cin>>n;
    for(int i=0; i<n; i++) {
        int x,y; cin>>x>>y;
        int val; cin>>val;
        given_shells_mines.push_back({{x,y},val});
    }
    int m; cin>>m;
    for(int i=0; i<m; i++) {
        int x,y; cin>>x>>y;
        int val; cin>>val;
        given_shells_mines.push_back({{x,y},-val});
    }
    cout << score_calc(edges,given_shells_mines) << endl;
    
    return 0;  
}